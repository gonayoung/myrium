<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myrium.mapper.ProductMapper">

	<!-- 메인페이지 전시 여부 확인 후 리스트 가져오기 -->
	<select id="getproductList"
		resultType="com.myrium.domain.ProductVO">
		select * from product where ${isMain} = 1
	</select>

	<!-- 썸네일 여부 확인 후 가져오기 -->
	<select id="getThumbnail"
		resultType="com.myrium.domain.ImgpathVO">
		SELECT * FROM ( SELECT * FROM img_path WHERE product_id =
		#{productid} AND is_thumbnail_main = 1 ORDER BY id) WHERE ROWNUM = 1
	</select>

	<!-- 타임세일 여부에 따른 리스트 조회 -->
	<select id="gettimesaleList"
		resultType="com.myrium.domain.ProductVO">
		select * from product where is_timesales = 1
	</select>

	<!-- 상품 디테일 페이지 상품 받아오기 -->
	<select id="getproductInfo"
		resultType="com.myrium.domain.ProductVO">
		select * from product where id=#{id}
	</select>

	<!-- 썸네일 이미지 불러오기 -->
	<select id="productInfothumbnail"
		resultType="com.myrium.domain.ImgpathVO">
		select * from img_path where product_id=#{id} and
		is_thumbnail_main = 1
	</select>

	<select id="productSliderImg"
		resultType="com.myrium.domain.ImgpathVO">
		select * from img_path where product_id=#{id} and
		is_thumbnail_main = 0 and is_detail = 0
	</select>

	<!-- 상품 상세정보 이미지 불러오기 -->
	<select id="productDetailImg"
		resultType="com.myrium.domain.ImgpathVO">
		select * from (select * from img_path where
		product_id=#{id} and is_thumbnail_main = 0 and is_detail = 1) WHERE
		ROWNUM
		= 1
	</select>

	<!-- 인기있는 상품 상위 10개만 조회하기 -->
	<select id="getPopularProduct"
		resultType="com.myrium.domain.ProductVO">
		SELECT * FROM ( SELECT * FROM product ORDER BY sales_count
		DESC) where ROWNUM &lt;= 10
	</select>

	<!-- 장바구니에 담기 -->
	<select id="inCart" resultType="com.myrium.domain.CartVO">
		INSERT INTO cart
		(id,product_id,user_id,quantity,is_selected,created_by,created_at,updated_by,updated_at,is_deleted)
		values
		(cart_seq.NEXTVAL,#{productId},#{userId},#{quantity},1,#{customerId},sysdate,null,null,0)
	</select>

	<!-- 장바구니 리스트 불러오기 -->
	<select id="CartList" resultType="com.myrium.domain.ProductVO">
		SELECT * FROM product WHERE id
		IN(select product_id from cart where user_id = #{userId} AND
		is_deleted = 0)
	</select>

	<!-- 카트에 담긴 물건 수량 불러오기 -->
	<select id="getCartInfo" resultType="com.myrium.domain.CartVO">
		SELECT * FROM cart WHERE
		product_id = #{productId} and user_id = #{userId}
	</select>

	<!-- 장바구니에 상품이 존재하는지 확인 -->
	<select id="findCartItem" resultType="com.myrium.domain.CartVO">
		SELECT * FROM cart WHERE
		user_id = #{userId} and product_id = #{productId}
	</select>

	<select id="addQuantity" resultType="com.myrium.domain.CartVO">
		UPDATE cart
		SET quantity =
		#{newQuantity, jdbcType=INTEGER},
		updated_at = sysdate, is_deleted = 0
		WHERE product_id = #{productId, jdbcType=BIGINT}
		AND user_id =
		#{userId, jdbcType=BIGINT}
	</select>

	<update id="updateQuantity"
		parameterType="com.myrium.domain.OrderDTO">
		UPDATE cart SET quantity = #{newQuantity,
		jdbcType=INTEGER}, updated_at =
		sysdate
		WHERE product_id = #{productId,
		javaType=java.lang.Long, jdbcType=BIGINT}
		AND user_id = #{userId,
		javaType=java.lang.Long, jdbcType=BIGINT}
		AND is_deleted = 0
	</update>

	<update id="deleteCart">
		UPDATE cart SET is_deleted = 1, quantity = 0 WHERE
		product_id = #{productId} AND user_id = #{userId}
	</update>

	<select id="getStock" resultType="int">
		SELECT product_stock FROM
		product WHERE id = #{productid}
	</select>

	<update id="decreaseStock">
		UPDATE product SET product_stock = #{decreaseStock}
		where id = #{productid}
	</update>

	<select id="getSalesCount">
		SELECT sales_count from product where id =
		#{productid}
	</select>

	<update id="increaseSalesCount">
		UPDATE product SET sales_count =
		#{increaseSalesCount} where id = #{productid}
	</update>

	<select id="getSearchProductList"
		resultType="com.myrium.domain.ProductVO">
<![CDATA[
SELECT *
FROM (
    SELECT /*+INDEX_DESC(product pk_product)*/ 
           ROWNUM rn, p.*
    FROM (
        SELECT id, product_name, product_content, product_stock, product_price,
               is_deleted, created_at, created_by, updated_at, updated_by,
               is_timesales, is_mainone, is_maintwo, is_discount, discount_rate,
               timesalediscount_rate, total_discountrate, discount_price, sales_count
        FROM product
        WHERE LOWER(product_name) LIKE '%' || #{searchKeyword} || '%'
]]>
		<choose>
			<when test="sort == 'new'">
				ORDER BY created_at DESC
			</when>
			<when test="sort == 'name'">
				ORDER BY product_name ASC
			</when>
			<when test="sort == 'lowPrice'">
				ORDER BY (product_price - (product_price *
				COALESCE(total_discountrate,
				0) / 100)) ASC
			</when>
			<when test="sort == 'highPrice'">
				ORDER BY (product_price - (product_price *
				COALESCE(total_discountrate,
				0) / 100)) DESC
			</when>
			<otherwise>
				ORDER BY id DESC
			</otherwise>
		</choose>
<![CDATA[
    ) p
    WHERE ROWNUM <= #{searchcri.pageNum} * #{searchcri.amount}
) 
WHERE rn > (#{searchcri.pageNum} - 1) * #{searchcri.amount}
]]>
	</select>

	<!-- 상품리뷰 -->
	<select id="findById" parameterType="long"
		resultType="com.myrium.domain.ProductDTO">
		SELECT * FROM product WHERE id = #{id}
	</select>
	<!-- 검색결과 카운트 -->
	<select id="searchResultCount" resultType="int">
		select count(*) from
		product where LOWER(product_name) LIKE '%' || #{searchKeyword} || '%'
	</select>

	<select id="productDirectPurchase"
		resultType="com.myrium.domain.ProductVO">
		SELECT * FROM product WHERE id = #{productId}
	</select>
	<!-- 카테고리 선택에 따른 상품 목록 조회 -->
	<select id="getCategoryList"
		resultType="com.myrium.domain.ProductVO">
		SELECT * FROM product WHERE id IN (
		select product_id from category
		where
		<choose>
			<when test="category == 'gardening'">
				gardening
			</when>
			<when test="category == 'plantKit'">
				plantKit
			</when>
			<when test="category == 'hurb'">
				hurb
			</when>
			<when test="category == 'vegetable'">
				vegetable
			</when>
			<when test="category == 'flower'">
				flower
			</when>
			<when test="category == 'etc'">
				etc
			</when>
		</choose>
		= 1)
		<choose>
			<when test="sort == 'new'">
				ORDER BY created_at DESC
			</when>
			<when test="sort == 'name'">
				ORDER BY product_name ASC
			</when>
			<when test="sort == 'lowPrice'">
				ORDER BY (product_price - (product_price *
				COALESCE(total_discountrate,
				0) / 100)) ASC
			</when>
			<when test="sort == 'highPrice'">
				ORDER BY (product_price - (product_price *
				COALESCE(total_discountrate,
				0) / 100)) DESC
			</when>
			<otherwise>
				ORDER BY id DESC
			</otherwise>
		</choose>
	</select>
	<!-- 모든 상품 조회 -->
	<select id="getAllProductList"
		resultType="com.myrium.domain.ProductVO">
		SELECT
		p.ID,
		p.PRODUCT_NAME,
		p.PRODUCT_STOCK,
		p.PRODUCT_PRICE,
		p.IS_DELETED,
		p.CREATED_AT,
		p.CREATED_BY,
		p.UPDATED_AT,
		p.UPDATED_BY,
		p.IS_TIMESALES,
		p.IS_MAINONE,
		p.IS_MAINTWO,
		p.IS_DISCOUNT,
		p.DISCOUNT_RATE,
		p.TIMESALEDISCOUNT_RATE,
		p.TOTAL_DISCOUNTRATE,
		p.DISCOUNT_PRICE,
		p.SALES_COUNT
		<choose>
			<when test="sort == 'review'">
				, COUNT(r.PRODUCT_ID) AS REVIEW_COUNT
			</when>
			<otherwise>
				, 0 AS REVIEW_COUNT
			</otherwise>
		</choose>
		FROM product p
		<if test="sort == 'review'">
			LEFT JOIN review r ON p.ID = r.PRODUCT_ID AND r.IS_DELETED = 0
		</if>
		<choose>
			<when test="sort == 'review'">
				GROUP BY
				p.ID,
				p.PRODUCT_NAME,
				p.PRODUCT_STOCK,
				p.PRODUCT_PRICE,
				p.IS_DELETED,
				p.CREATED_AT,
				p.CREATED_BY,
				p.UPDATED_AT,
				p.UPDATED_BY,
				p.IS_TIMESALES,
				p.IS_MAINONE,
				p.IS_MAINTWO,
				p.IS_DISCOUNT,
				p.DISCOUNT_RATE,
				p.TIMESALEDISCOUNT_RATE,
				p.TOTAL_DISCOUNTRATE,
				p.DISCOUNT_PRICE,
				p.SALES_COUNT
				ORDER BY REVIEW_COUNT DESC
			</when>
			<when test="sort == 'new'">
				ORDER BY p.CREATED_AT DESC
			</when>
			<when test="sort == 'name'">
				ORDER BY p.PRODUCT_NAME ASC
			</when>
			<when test="sort == 'lowPrice'">
				ORDER BY (p.PRODUCT_PRICE - (p.PRODUCT_PRICE *
				COALESCE(p.TOTAL_DISCOUNTRATE, 0) / 100)) ASC
			</when>
			<when test="sort == 'highPrice'">
				ORDER BY (p.PRODUCT_PRICE - (p.PRODUCT_PRICE *
				COALESCE(p.TOTAL_DISCOUNTRATE, 0) / 100)) DESC
			</when>
			<otherwise>
				ORDER BY p.ID DESC
			</otherwise>
		</choose>
	</select>
</mapper>