<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myrium.mapper.OrderMapper">

	<select id="findOrdersByCustomerId"
		resultType="com.myrium.domain.OrderDTO" parameterType="String">
		SELECT
		o.id AS id,
		m.customer_id AS customerId,
		m.customer_name AS receiver,
		m.phone_number AS phoneNumber,
		m.zipcode || ' ' || m.addr1 || ' ' || NVL(m.addr2, '') AS address,
		o.id AS ordersId,
		op.order_status AS orderStatus,
		TO_CHAR(o.order_date, 'YYYY-MM-DD') AS orderDate,
		p.product_name AS productName,
		p.product_price AS productPrice,
		p.id AS productId,
		p.discount_price,
		op.quantity AS quantity,
		o.orders_id AS ordersIdfull,
		ip.img_path AS img_path
		FROM
		orders_product op
		JOIN orders o ON op.orders_id = o.id
		JOIN product p ON op.product_id = p.id
		JOIN member m ON op.user_id = m.id
		LEFT JOIN img_path ip ON ip.product_id = p.id AND ip.is_thumbnail_main = 1
		WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
		AND m.customer_id = #{customerId}
		AND op.order_status NOT IN (4, 5, 6, 7, 8, 9, 11, 12, 14, 16)
		ORDER BY o.order_date DESC, o.orders_id
	</select>


	<insert id="insertOrders">

		<selectKey keyProperty="id" resultType="long" order="BEFORE">
			SELECT ORDER_SEQ.NEXTVAL FROM dual
		</selectKey>

		INSERT INTO orders (
		id,
		user_id,
		orders_id,
		order_date,
		customer_name,
		order_status,
		address,
		zipcode,
		phone_number,
		delivery_msg,
		payment_method,
		is_refundable,
		is_exchanged,
		is_apprefund,
		is_appexchanged
		) VALUES (
		#{id},
		#{userId},
		#{ordersId},
		SYSDATE,
		#{customerId},
		0,
		#{address},
		#{zipcode},
		#{phoneNumber},
		#{deliveryMsg},
		#{paymentMethod},
		0,
		0,
		0,
		0
		)
	</insert>

	<insert id="insertOrdersProduct">
		INSERT INTO orders_product (
		ID, PRODUCT_ID, ORDERS_ID, USER_ID,
		CREATED_BY, CREATED_AT,
		UPDATED_BY, UPDATED_AT,
		IS_DELETED, QUANTITY,
		ORDER_STATUS
		) VALUES (
		ORDERS_PRODUCT_SEQ.NEXTVAL, #{productId}
		,#{orderId}, #{userId},
		#{customerName}, SYSDATE,
		NULL, NULL,

		0, #{quantity},
		<choose>
			<when test="payment == 0">
				0
			</when>
			<when test="payment == 2">
				0
			</when>
			<otherwise>
				1
			</otherwise>
		</choose>

		)
	</insert>

	<delete id="deletePurchaseCart">
		delete from cart where user_id=#{userId} and product_id = #{productid}
	</delete>

	<!-- 취소/반품/교환 완료 주문 조회 -->
	<select id="selectCanceledOrdersByCustomerId"
		resultType="com.myrium.domain.OrderDTO" parameterType="String">
		SELECT
		o.id AS id,
		m.customer_id AS customerId,
		m.customer_name AS receiver,
		m.phone_number AS phoneNumber,
		m.zipcode || ' ' || m.addr1 || ' ' || NVL(m.addr2, '') AS address,
		o.id AS ordersId,
		TO_CHAR(o.order_date, 'YYYY-MM-DD') AS orderDate,
		p.product_name AS productName,
		p.product_price AS productPrice,
		op.quantity AS quantity,
		o.orders_id AS ordersIdfull,
		p.id AS productId,
		op.order_status AS orderStatus,
		p.discount_price,
		ip.img_path
		FROM
		orders_product op
		JOIN orders o ON op.orders_id = o.id
		JOIN product p ON op.product_id = p.id
		JOIN member m ON op.user_id = m.id
		LEFT JOIN img_path ip ON ip.product_id = p.id AND ip.is_thumbnail_main = 1
		WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
		AND m.customer_id = #{customerId}
		AND op.order_status IN (4, 5, 6, 7, 8, 9, 11, 12, 14, 16)
		ORDER BY o.order_date DESC, o.orders_id
	</select>


	<!-- 마이페이지 주문 처리 현황 -->
	<select id="countOrdersByStatus" resultType="map"
		parameterType="String">
		SELECT
		op.order_status AS ORDER_STATUS,
		COUNT(*) AS "COUNT"
		FROM
		orders_product op
		JOIN orders o ON op.orders_id = o.id
		JOIN member m ON o.user_id = m.id
		WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
		AND m.customer_id = #{customerId}
		AND TRIM(op.order_status) IN (0, 1, 2, 3)
		AND o.order_date >= ADD_MONTHS(SYSDATE, -3)
		GROUP BY op.order_status
	</select>



	<!-- 마이페이지 총주문 금액합산 -->
	<select id="getTotalPaidOrderAmount" parameterType="String"
		resultType="int">
		SELECT
		NVL(SUM(op.quantity * NVL(p.product_price, 0)), 0)
		FROM
		orders_product op
		JOIN orders o ON op.orders_id = o.id
		JOIN member m ON o.user_id = m.id
		LEFT JOIN product p ON op.product_id = p.id
		WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
		AND m.customer_id = #{customerId}
		AND op.order_status IN (0, 1, 2, 3)
		AND o.order_date >= ADD_MONTHS(SYSDATE, -3)
	</select>


	<!-- 주문상세내역 -->
	<select id="findOrderDetailById" parameterType="long"
		resultType="com.myrium.domain.OrderDTO">
		SELECT
		o.id AS id,
		TO_CHAR(o.order_date, 'yyyy-MM-dd') AS orderDate,
		op.orders_id AS ordersId,
		op.quantity,
		op.order_status AS orderStatus,
		p.product_name AS productName,
		p.product_price AS productPrice,
		op.product_id AS productId,
		o.payment_method AS paymentMethod,
		o.customer_name AS receiver,
		o.phone_number AS phoneNumber,
		o.zipcode AS zipcode,
		o.address AS address,
		o.orders_id AS ordersIdfull,
		o.delivery_msg AS deliveryMsg,
		p.discount_price,
		ip.img_path
		FROM
		orders o
		JOIN orders_product op ON o.id = op.orders_id
		LEFT JOIN product p ON op.product_id = p.id
		LEFT JOIN img_path ip ON ip.product_id = p.id AND ip.is_thumbnail_main = 1
		WHERE o.id = #{orderId}
	</select>

	<!-- 주문상세내역 금액합산 -->

	<select id="getValidOrderTotalAmount" parameterType="long"
		resultType="int">
		SELECT
		NVL(SUM((p.product_price - (p.product_price * COALESCE(total_discountrate, 0) / 100))*
		op.quantity), 0)
		FROM
		orders_product op
		JOIN product p ON op.product_id = p.id
		WHERE op.orders_id = #{orderId}
		AND op.order_status NOT IN (4, 5, 6, 7, 8, 9, 11, 12, 14, 16)
		AND op.is_deleted = 0
	</select>

	<!-- 환불,교환버튼 처리 -->
	<update id="updateOrderStatus">
	  <![CDATA[
	  UPDATE orders_product
	     SET order_status = #{orderStatus},
	         updated_at   = CASE
	                          WHEN #{orderStatus} = 3 AND order_status <> 3 THEN SYSDATE
	                          ELSE updated_at
	                        END
	   WHERE orders_id  = #{orderId}
	     AND product_id = #{productId}
	  ]]>
	</update>		
	<update id="updateOrdersStatus">
		UPDATE orders
		SET order_status = #{orderStatus}
		WHERE id = #{orderId}
	</update>

	<!-- 환불 완료 시 두 테이블 상태 변경 -->
	<update id="completeRefundStatus">
		UPDATE orders
		SET order_status = 7
		WHERE id = #{orderId};

		UPDATE orders_product
		SET order_status = 7
		WHERE orders_id = #{orderId};
	</update>

	<!-- 교환 완료 시 두 테이블 상태 변경 -->
	<update id="completeExchangeStatus">
		UPDATE orders
		SET order_status = 5
		WHERE id = #{orderId};

		UPDATE orders_product
		SET order_status = 5
		WHERE orders_id = #{orderId};
	</update>

	<select id="countOrdersToday" resultType="int">
		SELECT COUNT(*)
		FROM orders
		WHERE SUBSTR(orders_id, 1, 8) = #{today}
	</select>


	<select id="findOrderById"
		resultType="com.myrium.domain.OrderDTO">
		SELECT id, is_refundable, is_exchanged
		FROM orders
		WHERE id = #{orderId}

	</select>

	<select id="productList" resultType="com.myrium.domain.OrderDTO">
		SELECT
		p.*,
		op.quantity,
		ip.img_path
		FROM
		product p
		JOIN
		orders_product op ON p.id = op.product_id
		LEFT JOIN
		img_path ip ON p.id = ip.product_id AND ip.is_thumbnail_main = 1
		WHERE
		op.orders_id = #{orderId}
	</select>

	<!-- 상품리뷰 -->
	<select id="findProductInOrder"
		resultType="com.myrium.domain.OrderDTO">
		SELECT
		o.id AS id,
		TO_CHAR(o.order_date, 'yyyy-MM-dd') AS orderDate,
		op.orders_id AS ordersId,
		op.quantity,
		op.order_status AS orderStatus,
		p.product_name AS productName,
		p.product_price AS productPrice,
		p.id AS productId,
		o.payment_method AS paymentMethod,
		o.customer_name AS receiver,
		o.phone_number AS phoneNumber,
		o.zipcode AS zipcode,
		o.address AS address,
		o.orders_id AS ordersIdfull,
		o.delivery_msg AS deliveryMsg
		FROM
		orders o
		JOIN orders_product op ON o.id = op.orders_id
		LEFT JOIN product p ON op.product_id = p.id
		WHERE o.id = #{orderId}
		AND p.id = #{productId}
	</select>

	<!-- 주문상태변경 -->
	<select id="findOrdersForStatusUpdate"
		resultType="com.myrium.domain.OrderDTO">
		SELECT
		o.id AS id,
		op.product_id AS productId,
		op.order_status AS orderStatus,
		TO_CHAR(o.order_date, 'YYYY-MM-DD HH24:MI:SS') AS orderDate,
		op.orders_id AS ordersId
		FROM orders o
		JOIN orders_product op ON o.id = op.orders_id
		WHERE op.order_status IN (1, 2)
	</select>

<!-- 배송완료 후 구매확정 (헤더) -->
<update id="autoConfirmOrders">
  <![CDATA[
    UPDATE orders o
       SET o.order_status = 18
     WHERE o.order_status = 3
       AND o.order_date <= TRUNC(SYSDATE) - 2
  ]]>
</update>

<!-- 배송완료 후 구매확정 (라인) -->
<update id="autoConfirmOrderProducts">
  <![CDATA[
    UPDATE orders_product op
       SET op.order_status = 18
     WHERE op.order_status = 3
       AND EXISTS (
             SELECT 1
               FROM orders o
              WHERE o.id = op.orders_id
                AND o.order_date <= TRUNC(SYSDATE) - 2
          )
  ]]>
</update>

<!-- 라인 한 건 변경 -->
<update id="updateOrderStatusLine" parameterType="map">
  UPDATE orders_product
     SET order_status = #{orderStatus}
   WHERE orders_id = #{orderId}
     AND product_id = #{productId}
</update>

<!-- 라인 전체 일괄 변경 -->
<update id="updateAllOrderLines" parameterType="map">
  UPDATE orders_product
     SET order_status = #{orderStatus}
   WHERE orders_id = #{orderId}
</update>

<!-- 헤더 변경 -->
<update id="updateOrderStatusHeader" parameterType="map">
  UPDATE orders
     SET order_status = #{orderStatus}
   WHERE id = #{orderId}
</update>

<!-- 교환/환불 플래그 -->
<update id="updateExchangeFlag" parameterType="long">
  UPDATE orders
     SET is_exchanged = 1
   WHERE id = #{orderId}
</update>

<update id="updateRefundFlag" parameterType="long">
  UPDATE orders
     SET is_refundable = 1
   WHERE id = #{orderId}
</update>
</mapper>