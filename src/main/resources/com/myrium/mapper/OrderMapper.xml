<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myrium.mapper.OrderMapper">

<select id="findOrdersByCustomerId" resultType="com.myrium.domain.OrderDTO" parameterType="String">
SELECT
	o.id AS id,
  m.customer_id        AS customerId,
  m.customer_name      AS receiver,
  m.phone_number       AS phoneNumber,
  m.zipcode || ' ' || m.addr1 || ' ' || NVL(m.addr2, '') AS address,
  o.id          AS ordersId,
  op.order_status       AS orderStatus,
  TO_CHAR(o.order_date, 'YYYY-MM-DD') AS orderDate,
  p.product_name       AS productName,
  p.product_price      AS productPrice,
  p.id                 AS productId, 
  op.quantity          AS quantity,
  o.orders_id AS ordersIdfull
FROM
  orders_product op
JOIN orders o ON op.orders_id = o.id
JOIN product p ON op.product_id = p.id
JOIN member m ON op.user_id = m.id
WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
  AND m.customer_id = #{customerId}
  AND op.order_status NOT IN (4, 5, 6, 7)
ORDER BY o.order_date DESC, o.orders_id
</select>


<insert id="insertOrders">

    <selectKey keyProperty="id" resultType="long" order="BEFORE">
        SELECT ORDER_SEQ.NEXTVAL FROM dual
    </selectKey>
    
	INSERT INTO orders (
    id,
    user_id,
    orders_id,
    order_date,
    customer_name,
    order_status,
    address,
    zipcode,
    phone_number,
    delivery_msg,
    payment_method,
    is_refundable,
    is_exchanged,
    is_apprefund,
    is_appexchanged
) VALUES (
    #{id},
    #{userId},
    #{ordersId},
    SYSDATE,
    #{customerId},
    0,
    #{address},
    #{zipcode},
    #{phoneNumber},
    #{deliveryMsg},
    #{paymentMethod},
    0,
    0,
    0,
    0
)
</insert>

<insert id="insertOrdersProduct" >
	INSERT INTO orders_product (
    ID, PRODUCT_ID, ORDERS_ID, USER_ID, 
    CREATED_BY, CREATED_AT, 
    UPDATED_BY, UPDATED_AT, 
    IS_DELETED, QUANTITY, ORDER_STATUS
) VALUES (
    ORDERS_PRODUCT_SEQ.NEXTVAL, #{productId} ,#{orderId}, #{userId},
    #{customerName}, SYSDATE,
    NULL, NULL,
    0, #{quantity}, 0
)
</insert>

<delete id="deletePurchaseCart">
	delete from cart where user_id=#{userId} and product_id = #{productid}
</delete>

  <!-- 취소/반품/교환 완료 주문 조회 -->
  <select id="selectCanceledOrdersByCustomerId" resultType="com.myrium.domain.OrderDTO" parameterType="String">
    SELECT
    o.id AS id,
      m.customer_id        AS customerId,
      m.customer_name      AS receiver,
      m.phone_number       AS phoneNumber,
      m.zipcode || ' ' || m.addr1 || ' ' || NVL(m.addr2, '') AS address,
      o.id AS ordersId,
      TO_CHAR(o.order_date, 'YYYY-MM-DD') AS orderDate,
      p.product_name       AS productName,
      p.product_price      AS productPrice,
      op.quantity          AS quantity,
      op.order_status       AS orderStatus,
      o.orders_id AS ordersIdfull
    FROM
      orders_product op
    JOIN orders o ON op.orders_id = o.id
    JOIN product p ON op.product_id = p.id
    JOIN member m ON op.user_id = m.id
    WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
      AND m.customer_id = #{customerId}
     	AND op.order_status IN (4, 5, 6, 7)
    ORDER BY o.order_date DESC, o.orders_id
  </select>


<!-- 마이페이지 주문 처리 현황 -->
<select id="countOrdersByStatus" resultType="map" parameterType="String">
  SELECT
    TRIM(op.order_status) AS "ORDER_STATUS",
    COUNT(*) AS "COUNT"
  FROM
    orders_product op
  JOIN orders o ON op.orders_id = o.id
  JOIN member m ON o.user_id = m.id
  WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
    AND m.customer_id = #{customerId}
    AND TRIM(op.order_status) IN (0, 1, 2, 3)
    AND o.order_date >= ADD_MONTHS(SYSDATE, -3)
  GROUP BY TRIM(op.order_status)
</select>



<!-- 마이페이지 총주문 금액합산 -->
<select id="getTotalPaidOrderAmount" parameterType="String" resultType="int">
  SELECT
    NVL(SUM(op.quantity * NVL(p.product_price, 0)), 0)
  FROM
    orders_product op
  JOIN orders o ON op.orders_id = o.id
  JOIN member m ON o.user_id = m.id
  LEFT JOIN product p ON op.product_id = p.id
  WHERE (op.is_deleted IS NULL OR op.is_deleted = 0)
    AND m.customer_id = #{customerId}
    AND op.order_status IN (0, 1, 2, 3)
    AND o.order_date >= ADD_MONTHS(SYSDATE, -3)
</select>


<!-- 주문상세내역 -->
<select id="findOrderDetailById" parameterType="long" resultType="com.myrium.domain.OrderDTO">
  SELECT
    o.id AS id,                         
    TO_CHAR(o.order_date, 'yyyy-MM-dd') AS orderDate, 
    op.orders_id AS ordersId,      
    op.quantity,
    op.order_status AS orderStatus,
    p.product_name AS productName,
    p.product_price AS productPrice,
    p.id AS productId,
    o.payment_method AS paymentMethod,

    o.customer_name AS receiver,
    o.phone_number AS phoneNumber,
    o.zipcode AS zipcode,
    o.address AS address,
    o.delivery_msg AS deliveryMsg,
     o.orders_id AS ordersIdfull

  FROM
    orders o
  JOIN orders_product op ON o.id = op.orders_id
  JOIN product p ON op.product_id = p.id

  WHERE o.id = #{orderId}
</select>

<!-- 주문상세내역 금액합산 -->

<select id="getValidOrderTotalAmount" parameterType="long" resultType="int">
  SELECT
    NVL(SUM(p.product_price * op.quantity), 0)
  FROM
    orders_product op
  JOIN product p ON op.product_id = p.id
  WHERE op.orders_id = #{orderId}
    AND op.order_status NOT IN (4, 5, 6, 7)
    AND op.is_deleted = 0
</select>

<!-- 환불,교환버튼 처리 -->
<update id="updateRefundStatus">
  UPDATE orders
  SET is_apprefund = 1
  WHERE id = #{orderId}
</update>

<update id="updateExchangeStatus">
  UPDATE orders
  SET is_appexchanged = 1
  WHERE id = #{orderId}
</update>

<update id="updateProductRefundStatus">
  UPDATE orders_product
  SET order_status = 6  -- 환불신청중
  WHERE orders_id = #{orderId} AND product_id = #{productId}
</update>

<update id="updateProductExchangeStatus">
  UPDATE orders_product
  SET order_status = 4  -- 교환신청중
  WHERE orders_id = #{orderId} AND product_id = #{productId}
</update>
 
<select id="countOrdersToday" resultType="int">
  SELECT COUNT(*) 
  FROM orders 
  WHERE SUBSTR(orders_id, 1, 8) = #{today}
</select>

<select id="productList" resultType="com.myrium.domain.OrderDTO">
SELECT p.*, op.quantity
FROM product p
JOIN orders_product op ON p.id = op.product_id
WHERE op.orders_id = #{orderId}
</select>


</mapper>