<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myrium.mapper.AdminMemberMapper">

    <resultMap id="memberMap" type="com.myrium.domain.MemberVO">
        <id property="id" column="id"/>
        <result property="customerId" column="customer_id"/>
        <result property="password" column="password"/>
        <result property="customerName" column="customer_name"/>
        <result property="address" column="address"/>
        <result property="zipcode" column="zipcode"/>
		<result property="addr1" column="addr1"/>
		<result property="addr2" column="addr2"/>
        <result property="phoneNumber" column="phone_number"/>
        <result property="email" column="email"/>
        <result property="gender" column="gender"/>
        <result property="birthdate" column="birthdate"/>
        <result property="role" column="role"/>
        <result property="agreeTerms" column="agree_terms"/>
        <result property="agreePrivacy" column="agree_privacy"/>
        <result property="agreeThirdParty" column="agree_third_party"/>
        <result property="agreeDelegate" column="agree_delegate"/>
        <result property="agreeSms" column="agree_sms"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="createdAt" column="created_at"/>
        <result property="createdBy" column="created_by"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="updatedBy" column="updated_by"/>
        <collection property="authList" resultMap="authMap"/>
    </resultMap>
    
   	<resultMap type="com.myrium.domain.AuthVO" id="authMap">
	  <result property="userId" column="user_id"/>
	  <result property="auth" column="auth"/>
	  <result property="customerId" column="customer_id"/>
	</resultMap>
	
	<sql id="criterial">
	  <trim prefix="(" suffix=")" prefixOverrides="OR">
	    <foreach item='type' collection="cri.typeArr">
	      <trim prefix="OR">
	        <choose>
	          <when test="type == 'C'.toString()">
	            customer_id LIKE '%' || #{cri.keyword} || '%'
	          </when>
	          <when test="type == 'N'.toString()">
	            customer_name LIKE '%' || #{cri.keyword} || '%'
	          </when>
	        </choose>
	      </trim>
	    </foreach>
	  </trim>
	</sql>
	
	<select id="getMemberList" resultMap="memberMap">
	  SELECT * FROM (
	    SELECT ROWNUM rn, inner_query.*
	    FROM (
	      SELECT *
	      FROM member m
	      WHERE 1 = 1      
	      <if test="cri.auth != null and cri.auth != ''">
	        AND EXISTS (
	          SELECT 1 FROM member_auth a
	          WHERE a.user_id = m.id
	          <choose>
	            <when test="cri.auth eq 'MEMBER'">
				  AND EXISTS (
				    SELECT 1 FROM member_auth a
				    WHERE a.user_id = m.id
				      AND a.role = 'MEMBER'
				  )
				  AND NOT EXISTS (
				    SELECT 1 FROM member_auth a
				    WHERE a.user_id = m.id
				      AND a.role = 'ADMIN'
				  )
				</when>
	            <when test="cri.auth eq 'ADMIN'">
				  AND EXISTS (
				    SELECT 1 FROM member_auth a
				    WHERE a.user_id = m.id
				      AND a.role = 'ADMIN'
				  )
				</when>
	          </choose>
	        )
	      </if>
	      <if test="cri.is_deleted != -1">
	        AND is_deleted = #{cri.is_deleted}
	      </if>
	      <if test="cri.gender != null and cri.gender != ''">
	        AND gender = #{cri.gender}
	      </if>
		  <if test="cri.keyword != null and cri.keyword != '' and cri.type != null">
		    AND <include refid="criterial"/>
		  </if>
	      ORDER BY m.id DESC
	    ) inner_query
	    WHERE ROWNUM &lt;= #{cri.pageNum} * #{cri.amount}
	  )
	  WHERE rn &gt; (#{cri.pageNum} - 1) * #{cri.amount}
	</select>
	
	 <select id="getAuthList" resultMap="authMap">
		select * from member_auth where user_id = #{id}
	 </select>
	  
	  <select id="get" resultMap="memberMap">
	    SELECT * FROM member
	    WHERE id = #{id}
	  </select>
	
	  <delete id="harddel">
	    DELETE FROM member WHERE id = #{id}
	  </delete>
	
	  <update id="softdel">
	    UPDATE member SET is_deleted = 1 WHERE id = #{id}
	  </update>
	
	  <update id="restore">
	    UPDATE member SET is_deleted = 0 WHERE id = #{id}
	  </update>
	
	  <update id="update" parameterType="com.myrium.domain.MemberVO">
	    UPDATE member SET
	      customer_id = #{customerId},
	      <if test="password != null and password != ''">
	          password = #{password,jdbcType=VARCHAR},
	      </if>
	      customer_name = #{customerName},
	      address = #{address},
	      zipcode = #{zipcode},
	      addr1 = #{addr1},
	      addr2 = #{addr2},
	      phone_number = #{phoneNumber},
	      email = #{email},
	      gender = #{gender},
	      birthdate = #{birthdate},
	      agree_terms = #{agreeTerms},
	      agree_privacy = #{agreePrivacy},
	      agree_third_party = #{agreeThirdParty},
	      agree_delegate = #{agreeDelegate},
	      agree_sms = #{agreeSms},
	      is_deleted = #{isDeleted},
	      updated_at = SYSDATE,
	      updated_by = #{updatedBy}
	    WHERE id = #{id}
	  </update>
	  
	  <delete id="deleteAdminRole" parameterType="long">
	    DELETE FROM member_auth WHERE user_id = #{id} AND role = 'ADMIN'
	  </delete>
	  
	  	<!-- 중복 insert 방지 : count 체크 -->
	<select id="countAdminRole" resultType="java.lang.Integer">
	  SELECT COUNT(*) FROM member_auth WHERE user_id = #{id} AND role = 'ADMIN'
	</select>
	
	<!-- ADMIN role insert -->
	<insert id="insertAdminRole" parameterType="long">
	  INSERT INTO member_auth (user_id, role) VALUES (#{id}, 'ADMIN')
	</insert>
	 
	 <select id="getTotalCount" resultType="int">
	   SELECT COUNT(*) FROM member WHERE id > 0
	 </select>
	 
</mapper>

