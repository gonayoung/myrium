<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myrium.mapper.ReviewMapper">

<insert id="insertReview" parameterType="com.myrium.domain.ReviewDTO">
  INSERT INTO REVIEW (
    ID, USER_ID, PRODUCT_ID, CUSTOMER_ID, REVIEW_TITLE,
    REVIEW_CONTENT, IMAGE_URL, RATING, VIEW_COUNT,
    REVIEW_DATE, IS_DELETED, CREATED_AT, CREATED_BY
  ) VALUES (
    review_seq.NEXTVAL, #{userId}, #{productId}, #{customerId}, #{reviewTitle},
    #{reviewContent}, #{imageUrl}, #{rating}, 0,
    #{reviewDate}, 0, #{createdAt}, #{createdBy}
  )
</insert>

<select id="getReviewsByProductId" parameterType="long" resultType="com.myrium.domain.ReviewDTO">
  SELECT 
    r.id AS id,
    r.user_id AS userId,
    r.product_id AS productId,
    r.review_title AS reviewTitle,
    r.review_content AS reviewContent,
    r.image_url AS imageUrl,
    r.rating AS rating,
    r.view_count AS viewCount,
    r.review_date AS reviewDate,
    r.created_at AS createdAt,
    r.created_by AS createdBy,
    m.customer_id AS customerId
  FROM review r
  JOIN member m ON r.user_id = m.id
  WHERE r.product_id = #{productId}
    AND r.is_deleted = 0
  ORDER BY r.created_at DESC
</select>

<select id="findAllReviews" resultType="com.myrium.domain.ReviewDTO">
  SELECT
    id,
    review_title,
    review_content,
    customer_id,
    rating,
    image_url,
    review_date,
    view_count
  FROM
    review
  ORDER BY review_date DESC
</select>

<update id="incrementViewCount" parameterType="long">
  UPDATE review
  SET view_count = view_count + 1
  WHERE id = #{reviewId}
</update>

<select id="getReviewById" resultType="com.myrium.domain.ReviewDTO" parameterType="long">
  SELECT *
  FROM review
  WHERE id = #{reviewId}
</select>

<update id="incrementViewCountByProductId" parameterType="long">
    UPDATE review
    SET view_count = view_count + 1
    WHERE product_id = #{productId}
</update>

<select id="getAverageRatingByProductId" parameterType="long" resultType="double">
  SELECT NVL(ROUND(AVG(rating), 1), 0)
  FROM review
  WHERE product_id = #{productId}
</select>

<select id="countReviewsByProductId" resultType="int" parameterType="long">
    SELECT COUNT(*) FROM review WHERE product_id = #{productId}
</select>

 <!-- 페이징된 리뷰 조회 -->
<select id="getPagedReviewsByProductId" resultType="com.myrium.domain.ReviewDTO" parameterType="map">
  SELECT * FROM (
    SELECT inner_table.*, ROWNUM AS rn
    FROM (
      SELECT 
        r.id,
        r.user_id,
        r.product_id,
        r.review_title AS reviewTitle,
        r.review_content AS reviewContent,
        r.image_url AS imageUrl,
        r.rating,
        r.view_count AS viewCount,
		0 AS commentCount,
		r.review_date AS reviewDate,
        r.created_at AS createdAt,
        r.created_by AS createdBy,
        m.customer_id AS customerId
      FROM review r
      JOIN member m ON r.user_id = m.id
      WHERE r.product_id = #{productId}
        AND r.is_deleted = 0
      ORDER BY r.review_date DESC
    ) inner_table
    WHERE ROWNUM &lt;= #{endRow}
  )
  WHERE rn &gt;= #{startRow}
</select>

  <!-- 총 개수 -->
  <select id="countReviews" parameterType="string" resultType="int">
    SELECT COUNT(*)
    FROM REVIEW R
    JOIN PRODUCT P ON P.ID = R.PRODUCT_ID
    WHERE R.IS_DELETED = 0
    <if test="q != null and q != ''">
      AND (
        LOWER(R.REVIEW_TITLE)   LIKE '%' || LOWER(#{q}) || '%' OR
        LOWER(R.REVIEW_CONTENT) LIKE '%' || LOWER(#{q}) || '%' OR
        LOWER(P.PRODUCT_NAME)   LIKE '%' || LOWER(#{q}) || '%'
      )
    </if>
  </select>

  <!-- 리스트 -->
<select id="findReviews" parameterType="map" resultType="com.myrium.domain.ReviewDTO">
  SELECT * FROM (
    SELECT T.*, ROWNUM RN
    FROM (
      SELECT
        R.ID                 AS id,
        R.USER_ID            AS userId,
        R.PRODUCT_ID         AS productId,
        R.CUSTOMER_ID        AS customerId,
        R.REVIEW_TITLE       AS reviewTitle,
        R.REVIEW_CONTENT     AS reviewContent,
        SUBSTR(R.REVIEW_CONTENT, 1, 150) AS summary,
        R.IMAGE_URL          AS imageUrl,
        R.RATING             AS rating,
        NVL(R.VIEW_COUNT,0)  AS viewCount,
        0                    AS commentCount,   
        R.REVIEW_DATE        AS reviewDate,
        R.IS_DELETED         AS isDeleted,
        R.CREATED_AT         AS createdAt,
        R.CREATED_BY         AS createdBy,
        P.PRODUCT_NAME       AS productName
      FROM REVIEW R
      JOIN PRODUCT P ON P.ID = R.PRODUCT_ID
      WHERE R.IS_DELETED = 0
      <if test="q != null and q != ''">
        AND (
          LOWER(R.REVIEW_TITLE)   LIKE '%' || LOWER(#{q}) || '%'
          OR LOWER(R.REVIEW_CONTENT) LIKE '%' || LOWER(#{q}) || '%'
          OR LOWER(P.PRODUCT_NAME)   LIKE '%' || LOWER(#{q}) || '%'
        )
      </if>
      ORDER BY R.ID DESC
    ) T
    WHERE ROWNUM &lt;= #{offset} + #{size} 
  )
  WHERE RN &gt; #{offset}
</select>

  
  <select id="countAllReviews" resultType="int">
  SELECT COUNT(*) 
  FROM REVIEW
  WHERE IS_DELETED = 0
</select>
</mapper>
